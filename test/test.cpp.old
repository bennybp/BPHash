#include "test_helpers.hpp"

#include <algorithm>


using namespace bphash;

// A vector containing all the computed hashes
static std::vector<HashValue> found_hashes_;

// In test_integers.cpp
void test_integers(std::vector<HashValue> & found_hashes)

enum class MyEnumClass
{
    SomeVal1,
    SomeVal2,
    SomeVal3,
    SomeVal4 = 9001
};



struct MyStruct
{
    std::vector<double> i;
    int j;
    std::complex<double> k;

    void hash(Hasher & hasher) const
    {
        hasher(i, j, k);
    }
};




int main(void)
{
    // integer values to test
    std::vector<long> inttest{0,  1,  10,  100,
                                 -1, -10, -100};


    // floating point values to test
    std::vector<double> floattest{0.0, -1.0, 1.0, -1.000001, 1.000001,
                                  -1.0e30, 1.0e30, 1.0e-20, -1.0e-20};

    // strings to test
    std::vector<const char *> strtest{"Hello", "String1", "String2",
                                      "hello", "string1", "string2",
                                      " hello", "string1 ", "strIng2"};

    std::vector<MyEnumClass> eclasstest{MyEnumClass::SomeVal1,
                                        MyEnumClass::SomeVal2,
                                        MyEnumClass::SomeVal3,
                                        MyEnumClass::SomeVal4};

    for(auto i : inttest)
    {
        std::cout << "\nTesting integer value = " << i << "\n";
        TestSingle<unsigned char     >("unsigned char",      i, HashType::Hash128, found_hashes_);
        TestSingle<unsigned short    >("unsigned short",     i, HashType::Hash128, found_hashes_);
        TestSingle<unsigned int      >("unsigned int",       i, HashType::Hash128, found_hashes_);
        TestSingle<unsigned long     >("unsigned long",      i, HashType::Hash128, found_hashes_);
        TestSingle<unsigned long long>("unsigned long long", i, HashType::Hash128, found_hashes_);

        if(i < 0)
        {
            std::cout << "\nTesting integer value = " << -i << "\n";
            TestSingle<signed char       >("signed char",      i, HashType::Hash128, found_hashes_);
            TestSingle<signed short      >("signed short",     i, HashType::Hash128, found_hashes_);
            TestSingle<signed int        >("signed int",       i, HashType::Hash128, found_hashes_);
            TestSingle<signed long       >("signed long",      i, HashType::Hash128, found_hashes_);
            TestSingle<signed long long  >("signed long long", i, HashType::Hash128, found_hashes_);
        }
    }

    for(auto i : inttest)
    for(auto j : inttest)
    {
        std::cout << "\nTesting complex integer value = (" << i << ", " << j << ")\n";
        TestSingle<std::complex<unsigned char     >>("std::complex<unsigned char>",      {i,j}, HashType::Hash128, found_hashes_);
        TestSingle<std::complex<unsigned short    >>("std::complex<unsigned short>",     {i,j}, HashType::Hash128, found_hashes_);
        TestSingle<std::complex<unsigned int      >>("std::complex<unsigned int>",       {i,j}, HashType::Hash128, found_hashes_);
        TestSingle<std::complex<unsigned long     >>("std::complex<unsigned long>",      {i,j}, HashType::Hash128, found_hashes_);
        TestSingle<std::complex<unsigned long long>>("std::complex<unsigned long long>", {i,j}, HashType::Hash128, found_hashes_);

        if(i < 0 || j < 0)
        {
            TestSingle<std::complex<signed char       >>("std::complex<signed char>",        {i,j}, HashType::Hash128, found_hashes_);
            TestSingle<std::complex<signed short      >>("std::complex<signed short>",       {i,j}, HashType::Hash128, found_hashes_);
            TestSingle<std::complex<signed int        >>("std::complex<signed int>",         {i,j}, HashType::Hash128, found_hashes_);
            TestSingle<std::complex<signed long       >>("std::complex<signed long>",        {i,j}, HashType::Hash128, found_hashes_);
            TestSingle<std::complex<signed long long  >>("std::complex<signed long long>",   {i,j}, HashType::Hash128, found_hashes_);
        }
    }

    for(auto i : floattest)
    {
        std::cout << "\nTesting floating point value = " << i << "\n";
        TestSingle<float>("float",      i, HashType::Hash128, found_hashes_);
        TestSingle<double>("double",      i, HashType::Hash128, found_hashes_);
    }


    for(auto i : floattest)
    for(auto j : floattest)
    {
        std::cout << "\nTesting complex floating point value = (" << i << ", " << j << ")\n";
        TestSingle<std::complex<float>>("std::complex<float>",      {i,j}, HashType::Hash128, found_hashes_);
        TestSingle<std::complex<double>>("std::complex<double>",    {i,j}, HashType::Hash128, found_hashes_);
    }


    for(auto i : strtest)
    {
        std::cout << "\nTesting string value = \"" << i << "\"\n";
        TestSingle<std::string>("std::string", i, HashType::Hash128, found_hashes_);
        TestSingle<const char *>("const char *", i, HashType::Hash128, found_hashes_);
    }
    

    for(auto i : eclasstest)
    {
        std::cout << "\nTesting enum class value " << static_cast<std::underlying_type<MyEnumClass>::type>(i) << "\n";
        TestSingle<MyEnumClass>("MyEnumClass", i, HashType::Hash128, found_hashes_);
    }



    for(size_t i = 0; i < inttest.size(); i++)
    {
        std::cout << "\nTesting integer containers of length " << i+1 << "\n";
        TestContainers<unsigned char>("unsigned char", inttest.begin(), inttest.begin() + i + 1, HashType::Hash128, found_hashes_);
        TestContainers<unsigned short>("unsigned short", inttest.begin(), inttest.begin() + i + 1, HashType::Hash128, found_hashes_);
        TestContainers<unsigned int>("unsigned int", inttest.begin(), inttest.begin() + i + 1, HashType::Hash128, found_hashes_);
        TestContainers<unsigned long>("unsigned long", inttest.begin(), inttest.begin() + i + 1, HashType::Hash128, found_hashes_);
        TestContainers<unsigned long long>("unsigned long long", inttest.begin(), inttest.begin() + i + 1, HashType::Hash128, found_hashes_);

        TestContainers<signed char>("signed char", inttest.begin(), inttest.begin() + i + 1, HashType::Hash128, found_hashes_);
        TestContainers<signed short>("signed short", inttest.begin(), inttest.begin() + i + 1, HashType::Hash128, found_hashes_);
        TestContainers<signed int>("signed int", inttest.begin(), inttest.begin() + i + 1, HashType::Hash128, found_hashes_);
        TestContainers<signed long>("signed long", inttest.begin(), inttest.begin() + i + 1, HashType::Hash128, found_hashes_);
        TestContainers<signed long long>("signed long long", inttest.begin(), inttest.begin() + i + 1, HashType::Hash128, found_hashes_);
    }


    for(size_t i = 0; i < floattest.size(); i++)
    {
        std::cout << "\nTesting floating point containers of length " << i+1 << "\n";
        TestContainers<float>("float", floattest.begin(), floattest.begin() + i + 1, HashType::Hash128, found_hashes_);
        TestContainers<double>("double", floattest.begin(), floattest.begin() + i + 1, HashType::Hash128, found_hashes_);
    }

    for(size_t i = 0; i < strtest.size(); i++)
    {
        std::cout << "\nTesting string containers of length " << i+1 << "\n";
        TestContainers<std::string>("std::string", strtest.begin(), strtest.begin() + i + 1, HashType::Hash128, found_hashes_);
        TestContainers<const char *>("const char *", strtest.begin(), strtest.begin() + i + 1, HashType::Hash128, found_hashes_);
    }

    std::unordered_map<std::string, std::string> mymap {{"Hi", "4" }};
    TestSingle("Map", mymap, HashType::Hash128, found_hashes_);
    std::tuple<int, std::string> mytup{4, "HAJSD"};
    TestSingle("MyTuple", mytup, HashType::Hash128, found_hashes_);

    std::cout << "\n";
    std::cout << "==============================================================================\n";
    std::cout << "Found " << found_hashes_.size() << " hashes.\n";
    std::sort(found_hashes_.begin(), found_hashes_.end());

    auto dup = std::adjacent_find(found_hashes_.begin(), found_hashes_.end());
    if(dup != found_hashes_.end())
    {
        std::cout << "DUPLICATE FOUND: " << hash_to_string(*dup) << "\n";
        return 1;
    }
    else
        std::cout << "No duplicates found. Hooray!\n";
    

    return 0;
}

